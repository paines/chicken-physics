;;;; physics.import.scm - GENERATED BY CHICKEN 4.8.0.6 -*- Scheme -*-

(eval '(import
         chicken
         scheme
         foreign
         (prefix chipmunk low:)
         lolevel
         srfi-1
         srfi-4
         srfi-69
         data-structures
         (except
           chipmunk
           create-space
           space-add-body
           space-remove-body
           space-add-shape
           space-add-static-shape
           space-remove-shape
           space-add-constraint
           space-remove-constraint
           space-add-poststep-callback
           space-step
           space-userdata
           create-body
           create-static-body
           create-circle-shape
           create-polygon-shape
           create-box-shape
           create-pin-joint
           create-slide-joint
           create-pivot-joint-with-pivot
           create-pivot-joint-with-anchors
           create-groove-joint
           create-damped-spring
           create-damped-rotary-spring
           create-rotary-limit-joint
           create-ratchet-joint
           create-gear-joint
           create-simple-motor
           space-nearest-point-query
           space-segment-query
           space-bb-query
           space-shape-query
           space-each-body
           space-each-shape
           space-each-constraint
           body-each-shape
           body-each-constraint
           body-each-arbiter
           body-userdata
           shape-userdata
           shape-group
           shape-layers
           space-segment-query)))
(##sys#register-compiled-module
  'physics
  (list)
  '((space-shape-query . physics#space-shape-query)
    (space-bb-query . physics#space-bb-query)
    (space-segment-query . physics#space-segment-query)
    (space-nearest-point-query . physics#space-nearest-point-query)
    (%group->integer . physics#%group->integer)
    (%group-symbol-table . physics#%group-symbol-table)
    (%layers->list . physics#%layers->list)
    (%list->layers . physics#%list->layers)
    (constraint-userdata . physics#constraint-userdata)
    (create-simple-motor . physics#create-simple-motor)
    (create-gear-joint . physics#create-gear-joint)
    (create-ratchet-joint . physics#create-ratchet-joint)
    (create-rotary-limit-joint . physics#create-rotary-limit-joint)
    (create-damped-rotary-spring . physics#create-damped-rotary-spring)
    (create-damped-spring . physics#create-damped-spring)
    (create-groove-joint . physics#create-groove-joint)
    (create-pivot-joint-with-pivot . physics#create-pivot-joint-with-pivot)
    (create-pivot-joint-with-anchors . physics#create-pivot-joint-with-anchors)
    (create-slide-joint . physics#create-slide-joint)
    (create-pin-joint . physics#create-pin-joint)
    (constraint-meta-userdata . physics#constraint-meta-userdata)
    (constraint-meta-userdata-set! . physics#constraint-meta-userdata-set!)
    (constraint-meta? . physics#constraint-meta?)
    (make-constraint-meta . physics#make-constraint-meta)
    (polygon-shape-vertices . physics#polygon-shape-vertices)
    (shape-layers . physics#shape-layers)
    (shape-group . physics#shape-group)
    (shape-userdata . physics#shape-userdata)
    (create-box-shape . physics#create-box-shape)
    (create-polygon-shape . physics#create-polygon-shape)
    (create-circle-shape . physics#create-circle-shape)
    (shape-meta-userdata . physics#shape-meta-userdata)
    (shape-meta-userdata-set! . physics#shape-meta-userdata-set!)
    (shape-meta? . physics#shape-meta?)
    (make-shape-meta . physics#make-shape-meta)
    (body-each-arbiter . physics#body-each-arbiter)
    (body-each-constraint . physics#body-each-constraint)
    (body-each-shape . physics#body-each-shape)
    (body-userdata . physics#body-userdata)
    (create-static-body . physics#create-static-body)
    (create-body . physics#create-body)
    (body-meta-userdata . physics#body-meta-userdata)
    (body-meta-userdata-set! . physics#body-meta-userdata-set!)
    (body-meta? . physics#body-meta?)
    (make-body-meta . physics#make-body-meta)
    (space-step . physics#space-step)
    (space-add-poststep-callback . physics#space-add-poststep-callback)
    (space-remove-collision-handler . physics#space-remove-collision-handler)
    (space-add-collision-handler . physics#space-add-collision-handler)
    (space-on-collision-seperate . physics#space-on-collision-seperate)
    (space-on-collision-postsolve . physics#space-on-collision-postsolve)
    (space-on-collision-presolve . physics#space-on-collision-presolve)
    (space-on-collision-begin . physics#space-on-collision-begin)
    (space-remove-constraint . physics#space-remove-constraint)
    (space-add-constraint . physics#space-add-constraint)
    (space-remove-shape . physics#space-remove-shape)
    (space-add-static-shape . physics#space-add-static-shape)
    (space-add-shape . physics#space-add-shape)
    (space-remove-body . physics#space-remove-body)
    (space-add-body . physics#space-add-body)
    (space-each-constraint . physics#space-each-constraint)
    (space-each-shape . physics#space-each-shape)
    (space-each-body . physics#space-each-body)
    (space-userdata . physics#space-userdata)
    (space-constraints . physics#space-constraints)
    (space-shapes . physics#space-shapes)
    (space-bodies . physics#space-bodies)
    (create-space . physics#create-space)
    (%empty-space-meta . physics#%empty-space-meta)
    (space-meta-userdata . physics#space-meta-userdata)
    (space-meta-userdata-set! . physics#space-meta-userdata-set!)
    (space-meta-poststep-callbacks . physics#space-meta-poststep-callbacks)
    (space-meta-poststep-callbacks-set!
      .
      physics#space-meta-poststep-callbacks-set!)
    (space-meta-collision-handlers . physics#space-meta-collision-handlers)
    (space-meta-collision-handlers-set!
      .
      physics#space-meta-collision-handlers-set!)
    (space-meta-on-collision-seperate
      .
      physics#space-meta-on-collision-seperate)
    (space-meta-on-collision-seperate-set!
      .
      physics#space-meta-on-collision-seperate-set!)
    (space-meta-on-collision-postsolve
      .
      physics#space-meta-on-collision-postsolve)
    (space-meta-on-collision-postsolve-set!
      .
      physics#space-meta-on-collision-postsolve-set!)
    (space-meta-on-collision-presolve
      .
      physics#space-meta-on-collision-presolve)
    (space-meta-on-collision-presolve-set!
      .
      physics#space-meta-on-collision-presolve-set!)
    (space-meta-on-collision-begin . physics#space-meta-on-collision-begin)
    (space-meta-on-collision-begin-set!
      .
      physics#space-meta-on-collision-begin-set!)
    (space-meta-constraints . physics#space-meta-constraints)
    (space-meta-constraints-set! . physics#space-meta-constraints-set!)
    (space-meta-shapes . physics#space-meta-shapes)
    (space-meta-shapes-set! . physics#space-meta-shapes-set!)
    (space-meta-bodies . physics#space-meta-bodies)
    (space-meta-bodies-set! . physics#space-meta-bodies-set!)
    (space-meta? . physics#space-meta?)
    (make-space-meta . physics#make-space-meta)
    (%metadata . physics#%metadata)
    (%meta-hash . physics#%meta-hash)
    (free-gc-root . physics#free-gc-root)
    (new-gc-root . physics#new-gc-root)
    (true . physics#true)
    (_shape_query . physics#_shape_query)
    (_bb_query . physics#_bb_query)
    (_nearest_point_bridge . physics#_nearest_point_bridge)
    (_collision_seperate_bridge . physics#_collision_seperate_bridge)
    (_collision_postsolve_bridge . physics#_collision_postsolve_bridge)
    (_collision_presolve_bridge . physics#_collision_presolve_bridge)
    (_collision_begin_bridge . physics#_collision_begin_bridge)
    (_body_arbiter_iter_bridge . physics#_body_arbiter_iter_bridge)
    (_body_constraint_iter_bridge . physics#_body_constraint_iter_bridge)
    (_body_shape_iter_bridge . physics#_body_shape_iter_bridge)
    (_space_constraint_iter_bridge . physics#_space_constraint_iter_bridge)
    (_space_shape_iter_bridge . physics#_space_shape_iter_bridge)
    (_space_body_iter_bridge . physics#_space_body_iter_bridge)
    (cp-scale . chipmunk#cp-scale)
    (create-vect . chipmunk#create-vect)
    (vect-zero . chipmunk#vect-zero)
    (vect-x . chipmunk#vect-x)
    (vect-y . chipmunk#vect-y)
    (vect-=? . chipmunk#vect-=?)
    (vect-add . chipmunk#vect-add)
    (vect-sub . chipmunk#vect-sub)
    (vect-neg . chipmunk#vect-neg)
    (vect-mult . chipmunk#vect-mult)
    (vect-dot . chipmunk#vect-dot)
    (vect-cross . chipmunk#vect-cross)
    (vect-perp . chipmunk#vect-perp)
    (vect-rperp . chipmunk#vect-rperp)
    (vect-project . chipmunk#vect-project)
    (vect-rotate . chipmunk#vect-rotate)
    (vect-unrotate . chipmunk#vect-unrotate)
    (vect-length . chipmunk#vect-length)
    (vect-length-squared . chipmunk#vect-length-squared)
    (vect-lerp . chipmunk#vect-lerp)
    (vect-lerpconst . chipmunk#vect-lerpconst)
    (vect-slerp . chipmunk#vect-slerp)
    (vect-slerpconst . chipmunk#vect-slerpconst)
    (vect-normalize . chipmunk#vect-normalize)
    (vect-clamp . chipmunk#vect-clamp)
    (vect-dist . chipmunk#vect-dist)
    (vect-dist-squared . chipmunk#vect-dist-squared)
    (vect-near? . chipmunk#vect-near?)
    (angle->vect . chipmunk#angle->vect)
    (vect->angle . chipmunk#vect->angle)
    (create-bb . chipmunk#create-bb)
    (create-bb-for-circle . chipmunk#create-bb-for-circle)
    (bb-left-bottom . chipmunk#bb-left-bottom)
    (bb-right-top . chipmunk#bb-right-top)
    (bb-intersects? . chipmunk#bb-intersects?)
    (bb-contains-bb? . chipmunk#bb-contains-bb?)
    (bb-contains-vect? . chipmunk#bb-contains-vect?)
    (bb-merge . chipmunk#bb-merge)
    (bb-expand . chipmunk#bb-expand)
    (bb-center . chipmunk#bb-center)
    (bb-area . chipmunk#bb-area)
    (bb-merged-area . chipmunk#bb-merged-area)
    (bb-segment-query . chipmunk#bb-segment-query)
    (bb-intersects-seqment . chipmunk#bb-intersects-seqment)
    (bb-clamp-vect . chipmunk#bb-clamp-vect)
    (bb-wrap-vect . chipmunk#bb-wrap-vect)
    (body-free . chipmunk#body-free)
    (body-mass . chipmunk#body-mass)
    (body-moment . chipmunk#body-moment)
    (body-position . chipmunk#body-position)
    (body-velocity . chipmunk#body-velocity)
    (body-force . chipmunk#body-force)
    (body-angle . chipmunk#body-angle)
    (body-angle-velocity . chipmunk#body-angle-velocity)
    (body-torque . chipmunk#body-torque)
    (body-rotation . chipmunk#body-rotation)
    (body-velocity-limit . chipmunk#body-velocity-limit)
    (body-angular-velocity-limit . chipmunk#body-angular-velocity-limit)
    (body-space . chipmunk#body-space)
    (body-reset-forces . chipmunk#body-reset-forces)
    (body-apply-force . chipmunk#body-apply-force)
    (body-apply-impulse . chipmunk#body-apply-impulse)
    (body-sleeping? . chipmunk#body-sleeping?)
    (body-activate . chipmunk#body-activate)
    (body-sleep . chipmunk#body-sleep)
    (body-static? . chipmunk#body-static?)
    (body-roque? . chipmunk#body-roque?)
    (body-activate-static . chipmunk#body-activate-static)
    (body-sleep-with-group . chipmunk#body-sleep-with-group)
    (moment-for-circle . chipmunk#moment-for-circle)
    (moment-for-seqment . chipmunk#moment-for-seqment)
    (moment-for-box . chipmunk#moment-for-box)
    (moment-for-polygon . chipmunk#moment-for-polygon)
    (area-for-circle . chipmunk#area-for-circle)
    (area-for-seqment . chipmunk#area-for-seqment)
    (area-for-polygon . chipmunk#area-for-polygon)
    (body-local->world . chipmunk#body-local->world)
    (body-world->local . chipmunk#body-world->local)
    (no-group . chipmunk#no-group)
    (all-layers . chipmunk#all-layers)
    (shape-body . chipmunk#shape-body)
    (shape-bb . chipmunk#shape-bb)
    (shape-sensor . chipmunk#shape-sensor)
    (shape-elasticity . chipmunk#shape-elasticity)
    (shape-friction . chipmunk#shape-friction)
    (shape-surface-velocity . chipmunk#shape-surface-velocity)
    (shape-collision-type . chipmunk#shape-collision-type)
    (shape-space . chipmunk#shape-space)
    (shape-free . chipmunk#shape-free)
    (shape-cache-bb . chipmunk#shape-cache-bb)
    (shape-update . chipmunk#shape-update)
    (reset-id-counter . chipmunk#reset-id-counter)
    (cicle-shape-offset . chipmunk#cicle-shape-offset)
    (cicle-shape-radius . chipmunk#cicle-shape-radius)
    (create-segment-shape . chipmunk#create-segment-shape)
    (segment-shape-a . chipmunk#segment-shape-a)
    (segment-shape-b . chipmunk#segment-shape-b)
    (segment-shape-normal . chipmunk#segment-shape-normal)
    (segment-shape-radius . chipmunk#segment-shape-radius)
    (segment-shape-set-neighbors! . chipmunk#segment-shape-set-neighbors!)
    (polygon-shape-vertex-count . chipmunk#polygon-shape-vertex-count)
    (polygon-shape-vertex-ref . chipmunk#polygon-shape-vertex-ref)
    (polygon-shape-radius . chipmunk#polygon-shape-radius)
    (%create-box-shape-with-radius . chipmunk#%create-box-shape-with-radius)
    (%create-box-shape . chipmunk#%create-box-shape)
    (valid-polygon? . chipmunk#valid-polygon?)
    (centroid-for-polygon . chipmunk#centroid-for-polygon)
    (centroid-for-polygon . chipmunk#centroid-for-polygon)
    (space-free . chipmunk#space-free)
    (space-iterations . chipmunk#space-iterations)
    (space-gravity . chipmunk#space-gravity)
    (space-damping . chipmunk#space-damping)
    (space-idle-speed-treshold . chipmunk#space-idle-speed-treshold)
    (space-sleep-time-treshold . chipmunk#space-sleep-time-treshold)
    (space-collision-slop . chipmunk#space-collision-slop)
    (space-collision-bias . chipmunk#space-collision-bias)
    (space-collision-persistence . chipmunk#space-collision-persistence)
    (space-current-time-step . chipmunk#space-current-time-step)
    (space-locked? . chipmunk#space-locked?)
    (space-static-body . chipmunk#space-static-body)
    (space-has-shape? . chipmunk#space-has-shape?)
    (space-has-body? . chipmunk#space-has-body?)
    (space-has-constraint? . chipmunk#space-has-constraint?)
    (space-body->static . chipmunk#space-body->static)
    (space-body->dynamic . chipmunk#space-body->dynamic)
    (space-reindex-shape . chipmunk#space-reindex-shape)
    (space-reindex-shapes-for-body . chipmunk#space-reindex-shapes-for-body)
    (space-reindex-static . chipmunk#space-reindex-static)
    (space-use-spatital-hash . chipmunk#space-use-spatital-hash)
    (%space-add-collision-handler . chipmunk#%space-add-collision-handler)
    (%space-remove-collision-handler
      .
      chipmunk#%space-remove-collision-handler)
    (%space-default-collision-handler-set!
      .
      chipmunk#%space-default-collision-handler-set!)
    (constraint-free . chipmunk#constraint-free)
    (constraint-a . chipmunk#constraint-a)
    (constraint-b . chipmunk#constraint-b)
    (constraint-max-force . chipmunk#constraint-max-force)
    (constraint-error-bias . chipmunk#constraint-error-bias)
    (constraint-max-bias . chipmunk#constraint-max-bias)
    (constraint-space . chipmunk#constraint-space)
    (constraint-impulse . chipmunk#constraint-impulse)
    (pin-joint-anchor-a . chipmunk#pin-joint-anchor-a)
    (pin-joint-anchor-b . chipmunk#pin-joint-anchor-b)
    (pin-joint-distance . chipmunk#pin-joint-distance)
    (slide-joint-anchor-a . chipmunk#slide-joint-anchor-a)
    (slide-joint-anchor-b . chipmunk#slide-joint-anchor-b)
    (slide-joint-min . chipmunk#slide-joint-min)
    (slide-joint-max . chipmunk#slide-joint-max)
    (pivot-joint-anchor-a . chipmunk#pivot-joint-anchor-a)
    (pivot-joint-anchor-b . chipmunk#pivot-joint-anchor-b)
    (groove-joint-anchor . chipmunk#groove-joint-anchor)
    (groove-joint-groove-a . chipmunk#groove-joint-groove-a)
    (groove-joint-groove-b . chipmunk#groove-joint-groove-b)
    (damped-sping-joint-anchor-a . chipmunk#damped-sping-joint-anchor-a)
    (damped-sping-joint-anchor-b . chipmunk#damped-sping-joint-anchor-b)
    (damped-sping-joint-rest-length . chipmunk#damped-sping-joint-rest-length)
    (damped-sping-joint-stiffness . chipmunk#damped-sping-joint-stiffness)
    (damped-sping-joint-damping . chipmunk#damped-sping-joint-damping)
    (damped-sping-joint-rest-length . chipmunk#damped-sping-joint-rest-length)
    (damped-sping-joint-stiffness . chipmunk#damped-sping-joint-stiffness)
    (damped-sping-joint-damping . chipmunk#damped-sping-joint-damping)
    (rotary-limit-joint-min . chipmunk#rotary-limit-joint-min)
    (rotary-limit-joint-max . chipmunk#rotary-limit-joint-max)
    (ratchet-joint-angle . chipmunk#ratchet-joint-angle)
    (ratchet-joint-phase . chipmunk#ratchet-joint-phase)
    (ratchet-joint-ratchet . chipmunk#ratchet-joint-ratchet)
    (gear-joint-phase . chipmunk#gear-joint-phase)
    (gear-joint-ratio . chipmunk#gear-joint-ratio)
    (simple-motor-rate . chipmunk#simple-motor-rate)
    (arbiter-elasticity . chipmunk#arbiter-elasticity)
    (arbiter-friction . chipmunk#arbiter-friction)
    (arbiter-surface-velocity . chipmunk#arbiter-surface-velocity)
    (arbiter-count . chipmunk#arbiter-count)
    (arbiter-normal . chipmunk#arbiter-normal)
    (arbiter-point . chipmunk#arbiter-point)
    (arbiter-depth . chipmunk#arbiter-depth)
    (arbiter-first-contact? . chipmunk#arbiter-first-contact?)
    (arbiter-get-shapes . chipmunk#arbiter-get-shapes)
    (arbiter-get-bodies . chipmunk#arbiter-get-bodies)
    (contact-point-set-length . chipmunk#contact-point-set-length)
    (contact-point-set-point-ref . chipmunk#contact-point-set-point-ref)
    (contact-point-set-normal-ref . chipmunk#contact-point-set-normal-ref)
    (contact-point-set-distance-ref . chipmunk#contact-point-set-distance-ref)
    (arbiter-total-impuse-with-friction
      .
      chipmunk#arbiter-total-impuse-with-friction)
    (arbiter-total-impuse . chipmunk#arbiter-total-impuse)
    (arbiter-total-kinetic-energy . chipmunk#arbiter-total-kinetic-energy)
    (nearest-point-query-info-shape . chipmunk#nearest-point-query-info-shape)
    (nearest-point-query-info-closest-point
      .
      chipmunk#nearest-point-query-info-closest-point)
    (nearest-point-query-info-distance
      .
      chipmunk#nearest-point-query-info-distance)
    (nearest-point-query-info-closest-gradient-distance
      .
      chipmunk#nearest-point-query-info-closest-gradient-distance)
    (shape-nearest-point-query . chipmunk#shape-nearest-point-query)
    (space-nearest-point-query-nearest
      .
      chipmunk#space-nearest-point-query-nearest)
    (segment-query-info-shape . chipmunk#segment-query-info-shape)
    (segment-query-info-normalized-distance
      .
      chipmunk#segment-query-info-normalized-distance)
    (seqment-query-info-normal . chipmunk#seqment-query-info-normal)
    (shape-segment-query . chipmunk#shape-segment-query)
    (segment-query-hit-point . chipmunk#segment-query-hit-point)
    (infinity . chipmunk#infinity))
  (list 'vect-list->f64vector
        '%cm-lambda
        '%define-chipmunk-foreign-methods
        '%define-chipmunk-foreign-properties
        (cons 'define-high-wrappers
              (syntax-rules
                ()
                ((_ free meta (new old) ...)
                 (begin
                   (define new
                     (lambda args
                       (let ((obj (apply old args)))
                         (hash-table-set! %meta-hash obj meta)
                         (set-finalizer!
                           obj
                           (lambda (obj)
                             (free obj)
                             (hash-table-delete! %meta-hash obj))))))
                   ...))))
        (cons 'let-protect
              (ir-macro-transformer
                (lambda (e i c)
                  (apply (lambda (_ bindings #!rest body)
                           (let ((v (gensym)))
                             (define new-gc-root
                               `(foreign-lambda*
                                  ,(i 'c-pointer)
                                  ((scheme-object ,(i v)))
                                  ,(sprintf
                                     "\n\t\t\tvoid* ptr = CHICKEN_new_finalizable_gc_root();\n\t                CHICKEN_gc_root_set(ptr, ~a);\n\t\t\tC_return(ptr);"
                                     v)))
                             (define free-gc-root
                               `(foreign-lambda*
                                  ,(i 'void)
                                  ((c-pointer ,(i v)))
                                  ,(sprintf "\n\t\t\tCHICKEN_delete_gc_root(~a);" v)))
                             `(let (unquote
                                    (map (lambda (b) `(,(car b) (,new-gc-root ,(cadr b))))
                                         bindings))
                                ,@body
                                ,@(map (lambda (b) `(,free-gc-root ,(car b)))
                                       bindings))))
                         e))))
        (cons 'delete-first-occurance
              (syntax-rules
                ()
                ((_ item lst pred?)
                 (let loop ((nlst lst) (res (list)))
                   (if (null? nlst)
                     res
                     (if (pred? (car nlst) item)
                       (if (null? (cdr nlst)) (append (cdr nlst) res))
                       (loop (cdr nlst) (cons (car nlst) res)))))))))
  (list))

;; END OF FILE
